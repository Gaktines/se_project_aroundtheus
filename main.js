!function(){"use strict";class e{constructor(e){let{cardData:t,cardSelector:r,_handleCardClick:s,handleDeleteClick:o,processLikeClick:i,userId:a}=e;this._cardId=t._id,this._name=t.name,this._link=t.link,this._cardSelector=r,this._cardTemplateInput=document.querySelector("#card-template").content.firstElementChild,this._handleCardClick=s,this._handleDeleteClick=o,this._userId=a,this._currentUserId=t.owner._id,this._processLikeClick=i,this._modalDeleteButton=document.querySelector("#modal-delete-btn"),this._likes=t.likes,this._cardElement=this._getTemplate(),this._cardImage=this._cardElement.querySelector("#card-image"),this._cardName=this._cardElement.querySelector("#card-name")}_setEventListeners(){this._likeButton=this._cardElement.querySelector(".card__button"),this._likeButton.addEventListener("click",(()=>{this._processLikeClick(this)})),this._deleteBtn.addEventListener("click",(()=>{this._handleDeleteClick(this._cardId)})),this._cardImage.addEventListener("click",(()=>this._handleCardClick({name:this._name,link:this._link})))}setLikesInfo(e){this._likes=e,this._updateLikesView()}_updateLikesView(){this._cardElement.querySelector(".card__number").textContent=this._likes.length,this.isLiked()?this._likeButton.classList.add("card__button_active"):this._likeButton.classList.remove("card__button_active")}isLiked(){return this._likes.some((e=>this._userId===e._id))}handleModalDeleteButton(){this._cardElement.remove()}handleDeleteButton(){this._currentUserId!==this._userId&&this._deleteBtn.remove()}_getTemplate(){return document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0)}getCard(){return this._cardImage.src=this._link,this._cardName.textContent=this._name,this._cardImage.alt=this._name,this._deleteBtn=this._cardElement.querySelector("#card-delete-button"),this.handleDeleteButton(),this._setEventListeners(),this._updateLikesView(),this._cardElement}}class t{constructor(e,t){this._formSelector=e.formSelector,this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._form=t,this._inputList=Array.from(this._form.querySelectorAll(this._inputSelector)),this._saveButton=this._form.querySelector(this._submitButtonSelector)}_showInputError(e){this._errorMessageElement=this._form.querySelector(`#${e.id}-error`),e.classList.add(this._inputErrorClass),this._errorMessageElement.textContent=e.validationMessage,this._errorMessageElement.classList.add(this._errorClass)}_hideInputError(e){this._errorMessageElement=this._form.querySelector(`#${e.id}-error`),e.classList.remove(this._inputErrorClass),this._errorMessageElement.textContent="",this._errorMessageElement.classList.remove(this._errorClass)}_hasInvalidInput(){return!this._inputList.every((e=>e.validity.valid))}toggleButtonState(e,t){if(this._hasInvalidInput())return this._saveButton.classList.add(this._inactiveButtonClass),void(this._saveButton.disabled=!0);this._saveButton.classList.remove(this._inactiveButtonClass),this._saveButton.disabled=!1}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}_setEventListeners(){this._inputList.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this.toggleButtonState()}))}))}enableValidation(){this._form.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}}class r{constructor(e,t){let{items:r,renderer:s}=e;this.items=r,this.renderer=s,this._container=document.querySelector(t)}renderItems(){this.items.forEach(this.renderer)}addItem(e){this._container.prepend(e)}}class s{constructor(e){let{popupSelector:t}=e;this._modalElement=document.querySelector(t),this.modalCloseButton=this._modalElement.querySelector("#modal-close-button")}open(){this._modalElement.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscClose)}close(){this._modalElement.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEscClose)}_handleEscClose=e=>{27===e.which&&this.close()};setEventListeners(){this._modalElement.addEventListener("click",this.closeModalOnRemoteClick)}closeModalOnRemoteClick=e=>{(e.target===e.currentTarget||e.target.classList.contains("modal__close"))&&this.close(e.target)}}class o extends s{constructor(e){let{popupSelector:t,handleFormSubmit:r}=e;super({popupSelector:t}),this._modalForm=this._modalElement.querySelector(".modal__form"),this._handleFormSubmit=r,this._submitBtn=this._modalForm.querySelector(".modal__button"),this._submitBtnText=this._submitBtn.textContent,this._inputValues={},this._inputs=this._modalForm.querySelectorAll(".modal__input")}_getInputValues(){return this._inputs.forEach((e=>{const t=e.name,r=e.value;this._inputValues[t]=r})),this._inputValues}renderLoading(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"Saving...";this._submitBtn.textContent=e?t:this._submitBtnText}setEventListeners(){super.setEventListeners(),this._modalForm.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit(this._getInputValues())}))}close(){this._modalForm.reset(),super.close()}setSubmitAction(e){this._handleFormSubmit=e}}const i=document.querySelector("#profile-edit-button"),a=document.querySelector("#profile-edit-modal"),n=(document.querySelector("#profile-modal-close-button"),document.querySelector("#profile-title"),document.querySelector("#profile-about"),document.querySelector("#profile-modal-title")),l=document.querySelector("#modal-about"),d=(a.querySelector("#profile-modal-form"),document.querySelector("#card-template").content.firstElementChild,document.querySelector(".card__delete_button"),document.querySelector("#add-card-edit-modal")),c=(document.querySelector("#add-card-modal-close-button"),document.querySelector("#profile-add-button")),u=(document.querySelector("#add-card-modal-title"),document.querySelector("#add-card-link"),d.querySelector("#add-card-modal-form"),document.querySelector("#card-list"),document.querySelector("#modal-close-button"),document.querySelector("#modal-delete"),{formSelector:".modal__form",inputSelector:".modal__input",submitButtonSelector:".modal__button",inactiveButtonClass:"modal__button_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__error_visible"}),h=document.querySelector(".profile__image-button"),m=(document.querySelector(".modal__button_save"),document.querySelector("#modal-profile-image")),_=new t(u,a),p=new t(u,d),S=new class{constructor(e){let{name:t,about:r,avatar:s}=e;this.name=document.querySelector(t),this.about=document.querySelector(r),this.avatar=document.querySelector(".profile__image")}getUserInfo(){return{name:this.name.textContent,about:this.about.textContent,avatar:this.avatar.src}}setUserInfo(e){let{name:t,about:r,avatar:s}=e;this.name.textContent=t,this.about.textContent=r,this.avatar.src=s}}({name:".profile__title",about:".profile__about"}),b=new o({popupSelector:"#profile-edit-modal",handleFormSubmit:function(e){b.renderLoading(!0),y.updateUserInfo(e.name,e.about).then((e=>{S.setUserInfo(e),b.close()})).catch((e=>{console.error(e)})).finally((()=>{b.renderLoading(!1)}))}}),L=new o({popupSelector:"#add-card-edit-modal",handleFormSubmit:function(e){L.renderLoading(!0),y.addCard(e).then((e=>{f(e),L.close()})).catch((e=>{console.error(e)})).finally((()=>{L.renderLoading(!1)}))}}),v=new class extends s{constructor(e){let{popupSelector:t}=e;super({popupSelector:t}),this.imageModalCard=this._modalElement.querySelector("#modal-image"),this.imageModalCaption=this._modalElement.querySelector("#modal-caption")}open(e){console.log(e),this.imageModalCaption.textContent=e.name,this.imageModalCard.src=e.link,this.imageModalCard.alt=e.name,super.open()}}({popupSelector:"#image-modal"}),k=new o({popupSelector:"#modal-delete",handleFormSubmit:()=>{}}),C=new o({popupSelector:"#modal-profile-image",handleFormSubmit:function(e){C.renderLoading(!0),y.updateProfileImage(e).then((e=>{S.setUserInfo(e),C.close()})).catch((e=>{console.error(e)})).finally((()=>{C.renderLoading(!1)}))}}),E=new t(u,m);function f(t){const r=new e({cardData:t,cardSelector:"#card-template",_handleCardClick:e=>{let{name:t,link:r}=e;v.open({name:t,link:r})},handleDeleteClick:e=>{k.open(),k.setSubmitAction((()=>{k.renderLoading(!0),y.deleteCard(e).then((e=>{r.handleModalDeleteButton(),k.close()})).catch((e=>{console.error(e)})).finally((()=>{k.renderLoading(!1)}))}))},processLikeClick:g,userId:I});q.addItem(r.getCard())}function g(e){e.isLiked()?y.removeCardLike(e._cardId).then((e=>{this.setLikesInfo(e.likes)})).catch((e=>{console.error(e)})):y.addCardLike(this._cardId).then((e=>{this.setLikesInfo(e.likes)})).catch((e=>{console.error(e)}))}_.enableValidation(),p.enableValidation(),E.enableValidation(),b.setEventListeners(),L.setEventListeners(),v.setEventListeners(),k.setEventListeners(),C.setEventListeners(),i.addEventListener("click",(()=>{const e=S.getUserInfo();n.value=e.name,l.value=e.about,b.open()})),c.addEventListener("click",(()=>{p.toggleButtonState(),L.open()}));const y=new class{constructor(e){let{baseUrl:t,headers:r}=e;this._baseURL=t,this._headers=r}getAppInfo(){return Promise.all([this.getInitialCards(),this.getUserInfo()])}getInitialCards(){return this._request(`${this._baseURL}/cards`,{method:"GET",headers:this._headers})}updateProfileImage(e){return this._request(`${this._baseURL}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e.link})})}getUserInfo(){return this._request(`${this._baseURL}/users/me`,{method:"GET",headers:this._headers})}updateUserInfo(e,t){return this._request(`${this._baseURL}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify({name:e,about:t})})}addCard(e){let{name:t,link:r}=e;return this._request(`${this._baseURL}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify({name:t,link:r})})}deleteCard(e){return this._request(`${this._baseURL}/cards/${e}`,{method:"DELETE",headers:this._headers})}handleCardLikes(){return Promise.all([this.addCardLike(),this.removeCardLike()])}addCardLike(e){return this._request(`${this._baseURL}/cards/likes/${e}`,{method:"PUT",headers:this._headers})}removeCardLike(e){return this._request(`${this._baseURL}/cards/likes/${e}`,{method:"DELETE",headers:this._headers})}_checkResponse(e){return e.ok?e.json():Promise.reject(`Error ${JSON.stringify(e)}`)}_request(e,t){return fetch(e,t).then(this._checkResponse)}}({baseUrl:"https://around.nomoreparties.co/v1/group-12",headers:{authorization:"bb2f5d86-90ca-441b-9ac8-a1ee02058df5","Content-Type":"application/json"}});let q,I;y.getAppInfo().then((e=>{let[t,s]=e;I=s._id,q=new r({items:t,renderer:f},".cards__list"),q.renderItems(),S.setUserInfo({name:s.name,about:s.about,avatar:s.avatar})})).catch((e=>{console.error(e)})),h.addEventListener("click",(()=>{E.toggleButtonState(),C.open()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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Q2xCZCxRQUFTLDhDQUNUQyxRQUFTLENBQ1BtQixjQUFlLHVDQUNmLGVBQWdCLHNCQUtwQixJQUFJeEIsRUFDQTNLLEVBRUptSixFQUNHZ0MsYUFDQTlCLE1BQUtMLElBQXVCLElBQXJCb0QsRUFBT0MsR0FBU3JELEVBQ3RCaEosRUFBU3FNLEVBQVNsTSxJQUNsQndLLEVBQVUsSUFBSXJGLEVBQ1osQ0FBRUUsTUFBTzRHLEVBQU8zRyxTQUFVcUUsR0FDMUIsZ0JBRUZhLEVBQVFoRixjQUNSZ0QsRUFBU0ksWUFBWSxDQUNuQjFJLEtBQU1nTSxFQUFTaE0sS0FDZnVJLE1BQU95RCxFQUFTekQsTUFDaEJDLE9BQVF3RCxFQUFTeEQsUUFDakIsSUFFSFUsT0FBT0MsSUFDTkMsUUFBUUMsTUFBTUYsRUFBSSxJQU1wQmpCLEVBQW1CM0csaUJBQWlCLFNBQVMsS0FDM0MySSxFQUFzQjFGLG9CQUN0QnVGLEVBQWtCakUsTUFBTSxHIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHJhY3RpY3VtLy4vc3JjL2NvbXBvbmVudHMvQ2FyZC5qcyIsIndlYnBhY2s6Ly9wcmFjdGljdW0vLi9zcmMvY29tcG9uZW50cy9Gb3JtVmFsaWRhdG9yLmpzIiwid2VicGFjazovL3ByYWN0aWN1bS8uL3NyYy9jb21wb25lbnRzL1NlY3Rpb24uanMiLCJ3ZWJwYWNrOi8vcHJhY3RpY3VtLy4vc3JjL2NvbXBvbmVudHMvUG9wdXAuanMiLCJ3ZWJwYWNrOi8vcHJhY3RpY3VtLy4vc3JjL2NvbXBvbmVudHMvUG9wdXBXaXRoRm9ybS5qcyIsIndlYnBhY2s6Ly9wcmFjdGljdW0vLi9zcmMvdXRpbHMvY29uc3RhbnRzLmpzIiwid2VicGFjazovL3ByYWN0aWN1bS8uL3NyYy9wYWdlcy9pbmRleC5qcyIsIndlYnBhY2s6Ly9wcmFjdGljdW0vLi9zcmMvY29tcG9uZW50cy9Vc2VySW5mby5qcyIsIndlYnBhY2s6Ly9wcmFjdGljdW0vLi9zcmMvY29tcG9uZW50cy9Qb3B1cFdpdGhJbWFnZS5qcyIsIndlYnBhY2s6Ly9wcmFjdGljdW0vLi9zcmMvY29tcG9uZW50cy9BUEkuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFBvcHVwIGZyb20gXCIuL1BvcHVwLmpzXCI7XHJcblxyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENhcmQge1xyXG4gIGNvbnN0cnVjdG9yKHtcclxuICAgIGNhcmREYXRhLFxyXG4gICAgY2FyZFNlbGVjdG9yLFxyXG4gICAgX2hhbmRsZUNhcmRDbGljayxcclxuICAgIGhhbmRsZURlbGV0ZUNsaWNrLFxyXG4gICAgcHJvY2Vzc0xpa2VDbGljayxcclxuICAgIHVzZXJJZCxcclxuICB9KSB7XHJcbiAgICB0aGlzLl9jYXJkSWQgPSBjYXJkRGF0YS5faWQ7XHJcbiAgICB0aGlzLl9uYW1lID0gY2FyZERhdGEubmFtZTtcclxuICAgIHRoaXMuX2xpbmsgPSBjYXJkRGF0YS5saW5rO1xyXG4gICAgdGhpcy5fY2FyZFNlbGVjdG9yID0gY2FyZFNlbGVjdG9yO1xyXG4gICAgdGhpcy5fY2FyZFRlbXBsYXRlSW5wdXQgPVxyXG4gICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2NhcmQtdGVtcGxhdGVcIikuY29udGVudC5maXJzdEVsZW1lbnRDaGlsZDtcclxuXHJcbiAgICB0aGlzLl9oYW5kbGVDYXJkQ2xpY2sgPSBfaGFuZGxlQ2FyZENsaWNrO1xyXG4gICAgdGhpcy5faGFuZGxlRGVsZXRlQ2xpY2sgPSBoYW5kbGVEZWxldGVDbGljaztcclxuICAgIC8vdGhpcy5faGFuZGxlTGlrZUNsaWNrID0gaGFuZGxlTGlrZUNsaWNrO1xyXG4gICAgdGhpcy5fdXNlcklkID0gdXNlcklkO1xyXG4gICAgdGhpcy5fY3VycmVudFVzZXJJZCA9IGNhcmREYXRhLm93bmVyLl9pZDtcclxuICAgIHRoaXMuX3Byb2Nlc3NMaWtlQ2xpY2sgPSBwcm9jZXNzTGlrZUNsaWNrO1xyXG5cclxuICAgIHRoaXMuX21vZGFsRGVsZXRlQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNtb2RhbC1kZWxldGUtYnRuXCIpO1xyXG4gICAgdGhpcy5fbGlrZXMgPSBjYXJkRGF0YS5saWtlcztcclxuICAgIHRoaXMuX2NhcmRFbGVtZW50ID0gdGhpcy5fZ2V0VGVtcGxhdGUoKTtcclxuICAgIHRoaXMuX2NhcmRJbWFnZSA9IHRoaXMuX2NhcmRFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjY2FyZC1pbWFnZVwiKTtcclxuICAgIHRoaXMuX2NhcmROYW1lID0gdGhpcy5fY2FyZEVsZW1lbnQucXVlcnlTZWxlY3RvcihcIiNjYXJkLW5hbWVcIik7XHJcbiAgfVxyXG5cclxuICBfc2V0RXZlbnRMaXN0ZW5lcnMoKSB7XHJcbiAgICAvL1wiLmNhcmRfX2J1dHRvblwiXHJcbiAgICB0aGlzLl9saWtlQnV0dG9uID0gdGhpcy5fY2FyZEVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5jYXJkX19idXR0b25cIik7XHJcbiAgICB0aGlzLl9saWtlQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XHJcbiAgICAgIHRoaXMuX3Byb2Nlc3NMaWtlQ2xpY2sodGhpcyk7XHJcbiAgICB9KTtcclxuICAgIC8vXCIjY2FyZC1kZWxldGUtYnV0dG9uXCJcclxuXHJcbiAgICB0aGlzLl9kZWxldGVCdG4uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcclxuICAgICAgdGhpcy5faGFuZGxlRGVsZXRlQ2xpY2sodGhpcy5fY2FyZElkKTtcclxuICAgIH0pO1xyXG4gICAgLy9pbWFnZVxyXG4gICAgdGhpcy5fY2FyZEltYWdlXHJcbiAgICAgIC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT5cclxuICAgICAgICB0aGlzLl9oYW5kbGVDYXJkQ2xpY2soeyBuYW1lOiB0aGlzLl9uYW1lLCBsaW5rOiB0aGlzLl9saW5rIH0pXHJcbiAgICAgICk7XHJcbiAgICAvL1wiI21vZGFsLWRlbGV0ZS1idG5cIlxyXG4gIH1cclxuICBcclxuICBzZXRMaWtlc0luZm8obGlrZXMpIHtcclxuICAgIHRoaXMuX2xpa2VzID0gbGlrZXM7XHJcbiAgICB0aGlzLl91cGRhdGVMaWtlc1ZpZXcoKTtcclxuICB9XHJcbiAgX3VwZGF0ZUxpa2VzVmlldygpIHtcclxuICAgIHRoaXMuX2NhcmRFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY2FyZF9fbnVtYmVyXCIpLnRleHRDb250ZW50ID1cclxuICAgICAgdGhpcy5fbGlrZXMubGVuZ3RoO1xyXG4gICAgaWYgKHRoaXMuaXNMaWtlZCgpKSB7XHJcbiAgICAgIHRoaXMuX2xpa2VCdXR0b24uY2xhc3NMaXN0LmFkZChcImNhcmRfX2J1dHRvbl9hY3RpdmVcIik7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLl9saWtlQnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUoXCJjYXJkX19idXR0b25fYWN0aXZlXCIpO1xyXG4gICAgfVxyXG4gICAgLy8gIHRoYXQgZWRpdHMgdGhlIC50ZXh0Q29udGVudCBvZiB0aGUgc3BhbiB3aXRoIHRoZSBudW1iZXJcclxuICAgIC8vaW4gaXQgdG8gbWF0Y2ggaG93IG1hbnkgdGhpcy5fbGlrZXMgdGhlcmUgYXJlLFxyXG4gIH1cclxuXHJcbiAgaXNMaWtlZCgpIHtcclxuICAgIHJldHVybiB0aGlzLl9saWtlcy5zb21lKChsaWtlKSA9PiB7XHJcbiAgICAgIHJldHVybiB0aGlzLl91c2VySWQgPT09IGxpa2UuX2lkO1xyXG4gICAgfSk7XHJcbiAgfVxyXG4gIGhhbmRsZU1vZGFsRGVsZXRlQnV0dG9uKCkge1xyXG4gICAgdGhpcy5fY2FyZEVsZW1lbnQucmVtb3ZlKCk7XHJcbiAgfVxyXG4gIGhhbmRsZURlbGV0ZUJ1dHRvbigpIHtcclxuICAgIGlmICh0aGlzLl9jdXJyZW50VXNlcklkICE9PSB0aGlzLl91c2VySWQpIHtcclxuICAgICAgdGhpcy5fZGVsZXRlQnRuLnJlbW92ZSgpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgX2dldFRlbXBsYXRlKCkge1xyXG4gICAgcmV0dXJuIGRvY3VtZW50XHJcbiAgICAgIC5xdWVyeVNlbGVjdG9yKHRoaXMuX2NhcmRTZWxlY3RvcilcclxuICAgICAgLmNvbnRlbnQucXVlcnlTZWxlY3RvcihcIi5jYXJkXCIpXHJcbiAgICAgIC5jbG9uZU5vZGUodHJ1ZSk7XHJcbiAgfVxyXG5cclxuICBnZXRDYXJkKCkge1xyXG4gICAgXHJcbiAgICAvL2dldCB0aGUgY2FyZCB2aWV3XHJcbiAgICB0aGlzLl9jYXJkSW1hZ2Uuc3JjID0gdGhpcy5fbGluaztcclxuICAgIHRoaXMuX2NhcmROYW1lLnRleHRDb250ZW50ID0gdGhpcy5fbmFtZTtcclxuICAgIHRoaXMuX2NhcmRJbWFnZS5hbHQgPSB0aGlzLl9uYW1lO1xyXG4gICAgdGhpcy5fZGVsZXRlQnRuID0gdGhpcy5fY2FyZEVsZW1lbnQucXVlcnlTZWxlY3RvcihcIiNjYXJkLWRlbGV0ZS1idXR0b25cIik7XHJcbiAgICB0aGlzLmhhbmRsZURlbGV0ZUJ1dHRvbigpO1xyXG4gICAgLy9zZXQgdGhlIGV2ZW50IGxpc3RlbmVyc1xyXG4gICAgdGhpcy5fc2V0RXZlbnRMaXN0ZW5lcnMoKTtcclxuICAgIHRoaXMuX3VwZGF0ZUxpa2VzVmlldygpO1xyXG5cclxuICAgIC8vcmV0dXJuIHRoZSBjYXJkXHJcbiAgICByZXR1cm4gdGhpcy5fY2FyZEVsZW1lbnQ7XHJcbiAgfVxyXG59XHJcbi8vX3VwZGF0ZUxpa2VzVmlldyBpcyBjYWxsZWQgaW4gZ2V0VmlldyAod2hpY2ggcmV0dXJucyB0aGUgY2FyZFxyXG4vL0hUTUwgaW5pdGlhbGx5KSwgYW5kIGluIHNldExpa2VzSW5mbyB3aGljaCB1cGRhdGVzIHRoZVxyXG4vL3RoaXMuX2xpa2VzIGFycmF5IGJhc2VkIG9uIHRoZSBhcmd1bWVudHMgcGFzc2VkIGludG8gaXRcclxuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgRm9ybVZhbGlkYXRvciB7XHJcbiAgY29uc3RydWN0b3IodmFsaWRhdGlvbk9wdGlvbnMsIGZvcm1FbGVtZW50KSB7XHJcbiAgICB0aGlzLl9mb3JtU2VsZWN0b3IgPSB2YWxpZGF0aW9uT3B0aW9ucy5mb3JtU2VsZWN0b3I7XHJcbiAgICB0aGlzLl9pbnB1dFNlbGVjdG9yID0gdmFsaWRhdGlvbk9wdGlvbnMuaW5wdXRTZWxlY3RvcjtcclxuICAgIHRoaXMuX3N1Ym1pdEJ1dHRvblNlbGVjdG9yID0gdmFsaWRhdGlvbk9wdGlvbnMuc3VibWl0QnV0dG9uU2VsZWN0b3I7XHJcbiAgICB0aGlzLl9pbmFjdGl2ZUJ1dHRvbkNsYXNzID0gdmFsaWRhdGlvbk9wdGlvbnMuaW5hY3RpdmVCdXR0b25DbGFzcztcclxuICAgIHRoaXMuX2lucHV0RXJyb3JDbGFzcyA9IHZhbGlkYXRpb25PcHRpb25zLmlucHV0RXJyb3JDbGFzcztcclxuICAgIHRoaXMuX2Vycm9yQ2xhc3MgPSB2YWxpZGF0aW9uT3B0aW9ucy5lcnJvckNsYXNzO1xyXG4gICAgdGhpcy5fZm9ybSA9IGZvcm1FbGVtZW50O1xyXG4gICAgdGhpcy5faW5wdXRMaXN0ID0gQXJyYXkuZnJvbShcclxuICAgICAgdGhpcy5fZm9ybS5xdWVyeVNlbGVjdG9yQWxsKHRoaXMuX2lucHV0U2VsZWN0b3IpXHJcbiAgICApO1xyXG4gICAgdGhpcy5fc2F2ZUJ1dHRvbiA9IHRoaXMuX2Zvcm0ucXVlcnlTZWxlY3Rvcih0aGlzLl9zdWJtaXRCdXR0b25TZWxlY3Rvcik7XHJcbiAgfVxyXG5cclxuICBfc2hvd0lucHV0RXJyb3IoaW5wdXRFbGVtZW50KSB7XHJcbiAgICB0aGlzLl9lcnJvck1lc3NhZ2VFbGVtZW50ID0gdGhpcy5fZm9ybS5xdWVyeVNlbGVjdG9yKFxyXG4gICAgICBgIyR7aW5wdXRFbGVtZW50LmlkfS1lcnJvcmBcclxuICAgICk7XHJcbiAgICBpbnB1dEVsZW1lbnQuY2xhc3NMaXN0LmFkZCh0aGlzLl9pbnB1dEVycm9yQ2xhc3MpO1xyXG4gICAgdGhpcy5fZXJyb3JNZXNzYWdlRWxlbWVudC50ZXh0Q29udGVudCA9IGlucHV0RWxlbWVudC52YWxpZGF0aW9uTWVzc2FnZTtcclxuICAgIHRoaXMuX2Vycm9yTWVzc2FnZUVsZW1lbnQuY2xhc3NMaXN0LmFkZCh0aGlzLl9lcnJvckNsYXNzKTtcclxuICB9XHJcbiAgX2hpZGVJbnB1dEVycm9yKGlucHV0RWxlbWVudCkge1xyXG4gICAgdGhpcy5fZXJyb3JNZXNzYWdlRWxlbWVudCA9IHRoaXMuX2Zvcm0ucXVlcnlTZWxlY3RvcihcclxuICAgICAgYCMke2lucHV0RWxlbWVudC5pZH0tZXJyb3JgXHJcbiAgICApO1xyXG4gICAgaW5wdXRFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUodGhpcy5faW5wdXRFcnJvckNsYXNzKTtcclxuICAgIHRoaXMuX2Vycm9yTWVzc2FnZUVsZW1lbnQudGV4dENvbnRlbnQgPSBcIlwiO1xyXG4gICAgdGhpcy5fZXJyb3JNZXNzYWdlRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuX2Vycm9yQ2xhc3MpO1xyXG4gIH1cclxuICBfaGFzSW52YWxpZElucHV0KCkge1xyXG4gICAgcmV0dXJuICF0aGlzLl9pbnB1dExpc3QuZXZlcnkoXHJcbiAgICAgIChpbnB1dEVsZW1lbnQpID0+IGlucHV0RWxlbWVudC52YWxpZGl0eS52YWxpZFxyXG4gICAgKTtcclxuICB9XHJcbiAgdG9nZ2xlQnV0dG9uU3RhdGUoc2F2ZUJ1dHRvbiwgb3B0aW9ucykge1xyXG4gICAgaWYgKHRoaXMuX2hhc0ludmFsaWRJbnB1dCgpKSB7XHJcbiAgICAgIHRoaXMuX3NhdmVCdXR0b24uY2xhc3NMaXN0LmFkZCh0aGlzLl9pbmFjdGl2ZUJ1dHRvbkNsYXNzKTtcclxuICAgICAgdGhpcy5fc2F2ZUJ1dHRvbi5kaXNhYmxlZCA9IHRydWU7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIHRoaXMuX3NhdmVCdXR0b24uY2xhc3NMaXN0LnJlbW92ZSh0aGlzLl9pbmFjdGl2ZUJ1dHRvbkNsYXNzKTtcclxuICAgIHRoaXMuX3NhdmVCdXR0b24uZGlzYWJsZWQgPSBmYWxzZTtcclxuICB9XHJcbiAgX2NoZWNrSW5wdXRWYWxpZGl0eShpbnB1dEVsZW1lbnQpIHtcclxuICAgIGlmICghaW5wdXRFbGVtZW50LnZhbGlkaXR5LnZhbGlkKSB7XHJcbiAgICAgIHRoaXMuX3Nob3dJbnB1dEVycm9yKGlucHV0RWxlbWVudCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLl9oaWRlSW5wdXRFcnJvcihpbnB1dEVsZW1lbnQpO1xyXG4gICAgfVxyXG4gIH1cclxuICBfc2V0RXZlbnRMaXN0ZW5lcnMoKSB7XHJcbiAgICBcclxuICAgIHRoaXMuX2lucHV0TGlzdC5mb3JFYWNoKChpbnB1dEVsZW1lbnQpID0+IHtcclxuICAgICAgaW5wdXRFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJpbnB1dFwiLCAoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5fY2hlY2tJbnB1dFZhbGlkaXR5KGlucHV0RWxlbWVudCk7XHJcbiAgICAgICAgdGhpcy50b2dnbGVCdXR0b25TdGF0ZSgpO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgZW5hYmxlVmFsaWRhdGlvbigpIHtcclxuICAgIHRoaXMuX2Zvcm0uYWRkRXZlbnRMaXN0ZW5lcihcInN1Ym1pdFwiLCAoZXZ0KSA9PiB7XHJcbiAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgfSk7XHJcbiAgICB0aGlzLl9zZXRFdmVudExpc3RlbmVycygpO1xyXG4gIH1cclxufVxyXG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBTZWN0aW9uIHtcclxuICBjb25zdHJ1Y3Rvcih7IGl0ZW1zLCByZW5kZXJlciB9LCBjb250YWluZXIpIHtcclxuICAgIHRoaXMuaXRlbXMgPSBpdGVtcztcclxuICAgIHRoaXMucmVuZGVyZXIgPSByZW5kZXJlcjtcclxuICAgIHRoaXMuX2NvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoY29udGFpbmVyKTtcclxuICB9XHJcblxyXG4gIHJlbmRlckl0ZW1zKCkge1xyXG4gICAgdGhpcy5pdGVtcy5mb3JFYWNoKHRoaXMucmVuZGVyZXIpO1xyXG4gIH1cclxuXHJcbiAgYWRkSXRlbShpdGVtKSB7XHJcbiAgICB0aGlzLl9jb250YWluZXIucHJlcGVuZChpdGVtKTtcclxuICB9XHJcbn1cclxuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgUG9wdXAge1xyXG4gIGNvbnN0cnVjdG9yKHsgcG9wdXBTZWxlY3RvciB9KSB7XHJcbiAgICB0aGlzLl9tb2RhbEVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHBvcHVwU2VsZWN0b3IpO1xyXG4gICAgdGhpcy5tb2RhbENsb3NlQnV0dG9uID0gdGhpcy5fbW9kYWxFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXHJcbiAgICAgIFwiI21vZGFsLWNsb3NlLWJ1dHRvblwiXHJcbiAgICApO1xyXG4gIH1cclxuICBvcGVuKCkge1xyXG4gICAgdGhpcy5fbW9kYWxFbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJtb2RhbF9vcGVuZWRcIik7XHJcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCB0aGlzLl9oYW5kbGVFc2NDbG9zZSk7XHJcbiAgfVxyXG4gIGNsb3NlKCkge1xyXG4gICAgdGhpcy5fbW9kYWxFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoXCJtb2RhbF9vcGVuZWRcIik7XHJcbiAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCB0aGlzLl9oYW5kbGVFc2NDbG9zZSk7XHJcbiAgfVxyXG4gIF9oYW5kbGVFc2NDbG9zZSA9IChldnQpID0+IHtcclxuICAgIGNvbnN0IEVTQ19LRVlDT0RFID0gMjc7XHJcbiAgICBpZiAoZXZ0LndoaWNoID09PSBFU0NfS0VZQ09ERSkge1xyXG4gICAgICB0aGlzLmNsb3NlKCk7XHJcbiAgICB9XHJcbiAgfTtcclxuIFxyXG5cclxuICBcclxuICBzZXRFdmVudExpc3RlbmVycygpIHtcclxuICAgIHRoaXMuX21vZGFsRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgdGhpcy5jbG9zZU1vZGFsT25SZW1vdGVDbGljayk7XHJcbiAgfVxyXG4gIGNsb3NlTW9kYWxPblJlbW90ZUNsaWNrID0gKGV2dCkgPT4ge1xyXG4gICAgaWYgKFxyXG4gICAgICBldnQudGFyZ2V0ID09PSBldnQuY3VycmVudFRhcmdldCB8fFxyXG4gICAgICBldnQudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucyhcIm1vZGFsX19jbG9zZVwiKVxyXG4gICAgKSB7XHJcbiAgICAgIHRoaXMuY2xvc2UoZXZ0LnRhcmdldCk7XHJcbiAgICB9XHJcbiAgfTtcclxufVxyXG4iLCJpbXBvcnQgUG9wdXAgZnJvbSBcIi4vUG9wdXAuanNcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBvcHVwV2l0aEZvcm0gZXh0ZW5kcyBQb3B1cCB7XHJcbiAgY29uc3RydWN0b3IoeyBwb3B1cFNlbGVjdG9yLCBoYW5kbGVGb3JtU3VibWl0IH0pIHtcclxuICAgIHN1cGVyKHsgcG9wdXBTZWxlY3RvciB9KTtcclxuICAgIHRoaXMuX21vZGFsRm9ybSA9IHRoaXMuX21vZGFsRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLm1vZGFsX19mb3JtXCIpO1xyXG4gICAgdGhpcy5faGFuZGxlRm9ybVN1Ym1pdCA9IGhhbmRsZUZvcm1TdWJtaXQ7XHJcbiAgICB0aGlzLl9zdWJtaXRCdG4gPSB0aGlzLl9tb2RhbEZvcm0ucXVlcnlTZWxlY3RvcihcIi5tb2RhbF9fYnV0dG9uXCIpO1xyXG4gICAgdGhpcy5fc3VibWl0QnRuVGV4dCA9IHRoaXMuX3N1Ym1pdEJ0bi50ZXh0Q29udGVudDtcclxuICAgIHRoaXMuX2lucHV0VmFsdWVzPSB7fTtcclxuICAgIHRoaXMuX2lucHV0cyA9IHRoaXMuX21vZGFsRm9ybS5xdWVyeVNlbGVjdG9yQWxsKFwiLm1vZGFsX19pbnB1dFwiKTtcclxuICB9XHJcbiAgX2dldElucHV0VmFsdWVzKCkge1xyXG4gICAgdGhpcy5faW5wdXRzLmZvckVhY2goKGlucHV0KSA9PiB7XHJcbiAgICAgIGNvbnN0IG5hbWUgPSBpbnB1dC5uYW1lO1xyXG4gICAgICBjb25zdCB2YWx1ZSA9IGlucHV0LnZhbHVlO1xyXG4gICAgICB0aGlzLl9pbnB1dFZhbHVlc1tuYW1lXSA9IHZhbHVlO1xyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gdGhpcy5faW5wdXRWYWx1ZXM7XHJcbiAgfVxyXG4gIHJlbmRlckxvYWRpbmcoaXNMb2FkaW5nLCBsb2FkaW5nVGV4dD0nU2F2aW5nLi4uJykge1xyXG4gICAgaWYgKGlzTG9hZGluZykge1xyXG4gICAgICB0aGlzLl9zdWJtaXRCdG4udGV4dENvbnRlbnQgPSBsb2FkaW5nVGV4dDtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuX3N1Ym1pdEJ0bi50ZXh0Q29udGVudCA9IHRoaXMuX3N1Ym1pdEJ0blRleHQ7XHJcbiAgICB9XHJcbiAgfVxyXG4gIHNldEV2ZW50TGlzdGVuZXJzKCkge1xyXG4gICAgLy9zdWJtaXQgZXZlbnRcclxuICAgIHN1cGVyLnNldEV2ZW50TGlzdGVuZXJzKCk7XHJcblxyXG4gICAgdGhpcy5fbW9kYWxGb3JtLmFkZEV2ZW50TGlzdGVuZXIoXCJzdWJtaXRcIiwgKGV2dCkgPT4ge1xyXG4gICAgICBldnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgdGhpcy5faGFuZGxlRm9ybVN1Ym1pdCh0aGlzLl9nZXRJbnB1dFZhbHVlcygpKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgY2xvc2UoKSB7XHJcbiAgICB0aGlzLl9tb2RhbEZvcm0ucmVzZXQoKTtcclxuICAgIHN1cGVyLmNsb3NlKCk7XHJcbiAgfVxyXG5cclxuICBzZXRTdWJtaXRBY3Rpb24oYWN0aW9uKSB7XHJcbiAgICB0aGlzLl9oYW5kbGVGb3JtU3VibWl0ID0gYWN0aW9uO1xyXG4gIH1cclxufVxyXG4iLCJleHBvcnQgY29uc3QgcHJvZmlsZUVkaXRCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3Byb2ZpbGUtZWRpdC1idXR0b25cIik7XHJcbmV4cG9ydCBjb25zdCBwcm9maWxlRWRpdE1vZGFsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNwcm9maWxlLWVkaXQtbW9kYWxcIik7XHJcbmV4cG9ydCBjb25zdCBwcm9maWxlTW9kYWxDbG9zZUJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXHJcbiAgXCIjcHJvZmlsZS1tb2RhbC1jbG9zZS1idXR0b25cIlxyXG4pO1xyXG5leHBvcnQgY29uc3QgcHJvZmlsZVRpdGxlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNwcm9maWxlLXRpdGxlXCIpO1xyXG5leHBvcnQgY29uc3QgcHJvZmlsZUFib3V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNwcm9maWxlLWFib3V0XCIpO1xyXG5leHBvcnQgY29uc3QgcHJvZmlsZVRpdGxlSW5wdXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3Byb2ZpbGUtbW9kYWwtdGl0bGVcIik7XHJcbmV4cG9ydCBjb25zdCBwcm9maWxlQWJvdXRJbnB1dCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjbW9kYWwtYWJvdXRcIik7XHJcbmV4cG9ydCBjb25zdCBwcm9maWxlRWRpdEZvcm0gPSBwcm9maWxlRWRpdE1vZGFsLnF1ZXJ5U2VsZWN0b3IoXHJcbiAgXCIjcHJvZmlsZS1tb2RhbC1mb3JtXCJcclxuKTtcclxuZXhwb3J0IGNvbnN0IGNhcmRUZW1wbGF0ZUlucHV0ID1cclxuICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2NhcmQtdGVtcGxhdGVcIikuY29udGVudC5maXJzdEVsZW1lbnRDaGlsZDtcclxuZXhwb3J0IGNvbnN0IGRlbGV0ZUJ0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY2FyZF9fZGVsZXRlX2J1dHRvblwiKTtcclxuZXhwb3J0IGNvbnN0IGFkZENhcmRFZGl0TW9kYWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2FkZC1jYXJkLWVkaXQtbW9kYWxcIik7XHJcbmV4cG9ydCBjb25zdCBhZGRDYXJkTW9kYWxDbG9zZUJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXHJcbiAgXCIjYWRkLWNhcmQtbW9kYWwtY2xvc2UtYnV0dG9uXCJcclxuKTtcclxuZXhwb3J0IGNvbnN0IGFkZENhcmRCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3Byb2ZpbGUtYWRkLWJ1dHRvblwiKTtcclxuZXhwb3J0IGNvbnN0IGFkZENhcmRUaXRsZUlucHV0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcclxuICBcIiNhZGQtY2FyZC1tb2RhbC10aXRsZVwiXHJcbik7XHJcbmV4cG9ydCBjb25zdCBhZGRDYXJkTGlua0lucHV0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNhZGQtY2FyZC1saW5rXCIpO1xyXG5cclxuZXhwb3J0IGNvbnN0IGFkZENhcmRGb3JtID0gYWRkQ2FyZEVkaXRNb2RhbC5xdWVyeVNlbGVjdG9yKFxyXG4gIFwiI2FkZC1jYXJkLW1vZGFsLWZvcm1cIlxyXG4pO1xyXG5leHBvcnQgY29uc3QgY2FyZHNXcmFwID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNjYXJkLWxpc3RcIik7XHJcblxyXG5leHBvcnQgY29uc3QgaW1hZ2VNb2RhbENsb3NlQnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNtb2RhbC1jbG9zZS1idXR0b25cIik7XHJcbmV4cG9ydCBjb25zdCBkZWxldGVCdG5Nb2RhbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjbW9kYWwtZGVsZXRlXCIpO1xyXG5leHBvcnQgY29uc3QgdmFsaWRhdGlvbk9wdGlvbnMgPSB7XHJcbiAgZm9ybVNlbGVjdG9yOiBcIi5tb2RhbF9fZm9ybVwiLFxyXG4gIGlucHV0U2VsZWN0b3I6IFwiLm1vZGFsX19pbnB1dFwiLFxyXG4gIHN1Ym1pdEJ1dHRvblNlbGVjdG9yOiBcIi5tb2RhbF9fYnV0dG9uXCIsXHJcbiAgaW5hY3RpdmVCdXR0b25DbGFzczogXCJtb2RhbF9fYnV0dG9uX2Rpc2FibGVkXCIsXHJcbiAgaW5wdXRFcnJvckNsYXNzOiBcIm1vZGFsX19pbnB1dF90eXBlX2Vycm9yXCIsXHJcbiAgZXJyb3JDbGFzczogXCJtb2RhbF9fZXJyb3JfdmlzaWJsZVwiLFxyXG59O1xyXG5leHBvcnQgY29uc3QgcHJvZmlsZUltYWdlQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcclxuICBcIi5wcm9maWxlX19pbWFnZS1idXR0b25cIlxyXG4pO1xyXG5cclxuZXhwb3J0IGNvbnN0IHByb2ZpbGVJbWFnZVNhdmVCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFxyXG4gIFwiLm1vZGFsX19idXR0b25fc2F2ZVwiXHJcbik7XHJcbmV4cG9ydCBjb25zdCBwcm9maWxlSW1hZ2UgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI21vZGFsLXByb2ZpbGUtaW1hZ2VcIik7XHJcbiIsImltcG9ydCBDYXJkIGZyb20gXCIuLi9jb21wb25lbnRzL0NhcmQuanNcIjtcclxuaW1wb3J0IEZvcm1WYWxpZGF0b3IgZnJvbSBcIi4uL2NvbXBvbmVudHMvRm9ybVZhbGlkYXRvci5qc1wiO1xyXG5pbXBvcnQgXCIuLi9wYWdlcy9pbmRleC5jc3NcIjtcclxuaW1wb3J0IFNlY3Rpb24gZnJvbSBcIi4uL2NvbXBvbmVudHMvU2VjdGlvbi5qc1wiO1xyXG5pbXBvcnQgUG9wdXAgZnJvbSBcIi4uL2NvbXBvbmVudHMvUG9wdXAuanNcIjtcclxuaW1wb3J0IFVzZXJJbmZvIGZyb20gXCIuLi9jb21wb25lbnRzL1VzZXJJbmZvLmpzXCI7XHJcbmltcG9ydCBQb3B1cFdpdGhGb3JtIGZyb20gXCIuLi9jb21wb25lbnRzL1BvcHVwV2l0aEZvcm0uanNcIjtcclxuaW1wb3J0IFBvcHVwV2l0aEltYWdlIGZyb20gXCIuLi9jb21wb25lbnRzL1BvcHVwV2l0aEltYWdlLmpzXCI7XHJcbmltcG9ydCBBcGkgZnJvbSBcIi4uL2NvbXBvbmVudHMvQVBJLmpzXCI7XHJcbmltcG9ydCB7XHJcbiAgcHJvZmlsZUVkaXRCdXR0b24sXHJcbiAgcHJvZmlsZUltYWdlLFxyXG4gIHByb2ZpbGVJbWFnZVNhdmVCdXR0b24sXHJcbiAgcHJvZmlsZUltYWdlQnV0dG9uLFxyXG4gIHZhbGlkYXRpb25PcHRpb25zLFxyXG4gIGRlbGV0ZUJ0bk1vZGFsLFxyXG4gIGltYWdlTW9kYWxDbG9zZUJ0bixcclxuICBjYXJkc1dyYXAsXHJcbiAgYWRkQ2FyZEZvcm0sXHJcbiAgYWRkQ2FyZExpbmtJbnB1dCxcclxuICBhZGRDYXJkVGl0bGVJbnB1dCxcclxuICBhZGRDYXJkQnV0dG9uLFxyXG4gIGFkZENhcmRNb2RhbENsb3NlQnV0dG9uLFxyXG4gIGFkZENhcmRFZGl0TW9kYWwsXHJcbiAgZGVsZXRlQnRuLFxyXG4gIGNhcmRUZW1wbGF0ZUlucHV0LFxyXG4gIHByb2ZpbGVFZGl0Rm9ybSxcclxuICBwcm9maWxlQWJvdXRJbnB1dCxcclxuICBwcm9maWxlVGl0bGVJbnB1dCxcclxuICBwcm9maWxlQWJvdXQsXHJcbiAgcHJvZmlsZVRpdGxlLFxyXG4gIHByb2ZpbGVFZGl0TW9kYWwsXHJcbiAgcHJvZmlsZU1vZGFsQ2xvc2VCdXR0b24sXHJcbn0gZnJvbSBcIi4uL3V0aWxzL2NvbnN0YW50cy5qc1wiO1xyXG5cclxuXHJcblxyXG5jb25zdCBlZGl0Rm9ybVZhbGlkYXRvciA9IG5ldyBGb3JtVmFsaWRhdG9yKFxyXG4gIHZhbGlkYXRpb25PcHRpb25zLFxyXG4gIHByb2ZpbGVFZGl0TW9kYWxcclxuKTtcclxuY29uc3QgYWRkQ2FyZEZvcm1WYWxpZGF0b3IgPSBuZXcgRm9ybVZhbGlkYXRvcihcclxuICB2YWxpZGF0aW9uT3B0aW9ucyxcclxuICBhZGRDYXJkRWRpdE1vZGFsXHJcbik7XHJcbmNvbnN0IHVzZXJJbmZvID0gbmV3IFVzZXJJbmZvKHtcclxuICBuYW1lOiBcIi5wcm9maWxlX190aXRsZVwiLFxyXG4gIGFib3V0OiBcIi5wcm9maWxlX19hYm91dFwiLFxyXG59KTtcclxuXHJcbmNvbnN0IGVkaXRNb2RhbCA9IG5ldyBQb3B1cFdpdGhGb3JtKHtcclxuICBwb3B1cFNlbGVjdG9yOiBcIiNwcm9maWxlLWVkaXQtbW9kYWxcIixcclxuICBoYW5kbGVGb3JtU3VibWl0OiBoYW5kbGVFZGl0TW9kYWxGb3JtU3VibWl0LFxyXG59KTtcclxuY29uc3QgYWRkQ2FyZE1vZGFsID0gbmV3IFBvcHVwV2l0aEZvcm0oe1xyXG4gIHBvcHVwU2VsZWN0b3I6IFwiI2FkZC1jYXJkLWVkaXQtbW9kYWxcIixcclxuICBoYW5kbGVGb3JtU3VibWl0OiBoYW5kbGVBZGRDYXJkRm9ybVN1Ym1pdCxcclxufSk7XHJcbmNvbnN0IGltYWdlTW9kYWwgPSBuZXcgUG9wdXBXaXRoSW1hZ2Uoe1xyXG4gIHBvcHVwU2VsZWN0b3I6IFwiI2ltYWdlLW1vZGFsXCIsXHJcbn0pO1xyXG5jb25zdCBjYXJkRGVsZXRlTW9kYWwgPSBuZXcgUG9wdXBXaXRoRm9ybSh7XHJcbiAgcG9wdXBTZWxlY3RvcjogXCIjbW9kYWwtZGVsZXRlXCIsXHJcbiAgaGFuZGxlRm9ybVN1Ym1pdDogKCkgPT4ge30sXHJcbn0pO1xyXG5jb25zdCBwcm9maWxlSW1hZ2VNb2RhbCA9IG5ldyBQb3B1cFdpdGhGb3JtKHtcclxuICBwb3B1cFNlbGVjdG9yOiBcIiNtb2RhbC1wcm9maWxlLWltYWdlXCIsXHJcbiAgaGFuZGxlRm9ybVN1Ym1pdDogaGFuZGxlUHJvZmlsZUltYWdlRm9ybSxcclxufSk7XHJcbmNvbnN0IHByb2ZpbGVJbWFnZVZhbGlkYXRvciA9IG5ldyBGb3JtVmFsaWRhdG9yKFxyXG4gIHZhbGlkYXRpb25PcHRpb25zLFxyXG4gIHByb2ZpbGVJbWFnZVxyXG4pO1xyXG5cclxuZWRpdEZvcm1WYWxpZGF0b3IuZW5hYmxlVmFsaWRhdGlvbigpO1xyXG5hZGRDYXJkRm9ybVZhbGlkYXRvci5lbmFibGVWYWxpZGF0aW9uKCk7XHJcbnByb2ZpbGVJbWFnZVZhbGlkYXRvci5lbmFibGVWYWxpZGF0aW9uKCk7XHJcbmVkaXRNb2RhbC5zZXRFdmVudExpc3RlbmVycygpO1xyXG5cclxuYWRkQ2FyZE1vZGFsLnNldEV2ZW50TGlzdGVuZXJzKCk7XHJcblxyXG5pbWFnZU1vZGFsLnNldEV2ZW50TGlzdGVuZXJzKCk7XHJcblxyXG5jYXJkRGVsZXRlTW9kYWwuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcclxuXHJcbnByb2ZpbGVJbWFnZU1vZGFsLnNldEV2ZW50TGlzdGVuZXJzKCk7XHJcblxyXG5cclxuXHJcbmZ1bmN0aW9uIHJlbmRlckNhcmQoY2FyZERhdGEpIHtcclxuICBjb25zdCBjYXJkID0gbmV3IENhcmQoe1xyXG4gICAgY2FyZERhdGEsXHJcbiAgICBjYXJkU2VsZWN0b3I6IFwiI2NhcmQtdGVtcGxhdGVcIixcclxuICAgIF9oYW5kbGVDYXJkQ2xpY2s6ICh7IG5hbWUsIGxpbmsgfSkgPT4ge1xyXG4gICAgICAvL2hlcmUgaXMgd2hlcmUgd2Ugd2FudCB0byBvcGVuIG91ciBwb3B1cFdpdGhJbWFnZSBpbnN0YW5jZS5cclxuICAgICAgaW1hZ2VNb2RhbC5vcGVuKHsgbmFtZSwgbGluayB9KTtcclxuICAgIH0sXHJcbiAgICBoYW5kbGVEZWxldGVDbGljazogKGNhcmRJZCkgPT4ge1xyXG4gICAgICAvLyBvcGVuIHRoZSBtb2RhbFxyXG4gICAgICBjYXJkRGVsZXRlTW9kYWwub3BlbigpO1xyXG4gICAgICAvLyBzZXQgYSBzdWJtaXQgYWN0aW9uXHJcbiAgICAgIGNhcmREZWxldGVNb2RhbC5zZXRTdWJtaXRBY3Rpb24oKCkgPT4ge1xyXG4gICAgICAgIGNhcmREZWxldGVNb2RhbC5yZW5kZXJMb2FkaW5nKHRydWUpOyAgXHJcbiAgICAgICAgYXBpXHJcbiAgICAgICAgICAuZGVsZXRlQ2FyZChjYXJkSWQpXHJcbiAgICAgICAgICAudGhlbigocmVzKSA9PiB7XHJcbiAgICAgICAgICAgIGNhcmQuaGFuZGxlTW9kYWxEZWxldGVCdXR0b24oKTtcclxuICAgICAgICAgICAgY2FyZERlbGV0ZU1vZGFsLmNsb3NlKCk7XHJcbiAgICAgICAgICB9KVxyXG4gICAgICAgICAgLmNhdGNoKChlcnIpID0+IHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xyXG4gICAgICAgICAgfSlcclxuICAgICAgICAgIC5maW5hbGx5KCgpPT57XHJcbiAgICAgICAgICAgIGNhcmREZWxldGVNb2RhbC5yZW5kZXJMb2FkaW5nKGZhbHNlKTtcclxuICAgICAgICAgIH0pOyBcclxuICAgICAgfSk7XHJcbiAgICAgIFxyXG4gICAgfSxcclxuICAgIHByb2Nlc3NMaWtlQ2xpY2ssXHJcbiAgICB1c2VySWQsXHJcbiAgfSk7XHJcblxyXG4gIHNlY3Rpb24uYWRkSXRlbShjYXJkLmdldENhcmQoKSk7XHJcbn1cclxuZnVuY3Rpb24gcHJvY2Vzc0xpa2VDbGljayhjYXJkKSB7XHJcbiAgY29uc3QgaXNMaWtlZCA9IGNhcmQuaXNMaWtlZCgpO1xyXG4gIGlmIChpc0xpa2VkKSB7XHJcbiAgICBhcGkucmVtb3ZlQ2FyZExpa2UoY2FyZC5fY2FyZElkKS50aGVuKChkYXRhKSA9PiB7XHJcbiAgICAgIHRoaXMuc2V0TGlrZXNJbmZvKGRhdGEubGlrZXMpO1xyXG4gICAgfSkuY2F0Y2goKGVycikgPT4ge1xyXG4gICAgICBjb25zb2xlLmVycm9yKGVycik7XHJcbiAgICB9KTtcclxuICB9IGVsc2Uge1xyXG4gICAgYXBpLmFkZENhcmRMaWtlKHRoaXMuX2NhcmRJZCkudGhlbigoZGF0YSkgPT4ge1xyXG4gICAgICB0aGlzLnNldExpa2VzSW5mbyhkYXRhLmxpa2VzKTtcclxuICAgIH0pLmNhdGNoKChlcnIpID0+IHtcclxuICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBoYW5kbGVFZGl0TW9kYWxGb3JtU3VibWl0KGlucHV0VmFsdWVzKSB7XHJcbiAgZWRpdE1vZGFsLnJlbmRlckxvYWRpbmcodHJ1ZSk7XHJcbiAgYXBpLnVwZGF0ZVVzZXJJbmZvKGlucHV0VmFsdWVzLm5hbWUsIGlucHV0VmFsdWVzLmFib3V0KS50aGVuKChkYXRhKSA9PiB7XHJcbiAgICB1c2VySW5mby5zZXRVc2VySW5mbyhkYXRhKTtcclxuICAgIGVkaXRNb2RhbC5jbG9zZSgpO1xyXG4gIH0pLmNhdGNoKChlcnIpID0+IHtcclxuICAgIGNvbnNvbGUuZXJyb3IoZXJyKX0pXHJcbiAgICAuZmluYWxseSgoKT0+e1xyXG4gICAgICBlZGl0TW9kYWwucmVuZGVyTG9hZGluZyhmYWxzZSk7XHJcbiAgICB9KTsgXHJcbn1cclxuZnVuY3Rpb24gaGFuZGxlQWRkQ2FyZEZvcm1TdWJtaXQoY2FyZERhdGEpIHtcclxuICBhZGRDYXJkTW9kYWwucmVuZGVyTG9hZGluZyh0cnVlKTtcclxuICBhcGlcclxuICAgIC5hZGRDYXJkKGNhcmREYXRhKVxyXG4gICAgLnRoZW4oKGNhcmREYXRhKSA9PiB7XHJcbiAgICAgIHJlbmRlckNhcmQoY2FyZERhdGEpO1xyXG4gICAgICBhZGRDYXJkTW9kYWwuY2xvc2UoKTtcclxuICAgIH0pXHJcbiAgICAuY2F0Y2goKGVycikgPT4ge1xyXG4gICAgICBjb25zb2xlLmVycm9yKGVycik7XHJcbiAgICB9KS5maW5hbGx5KCgpPT57XHJcbiAgICAgIGFkZENhcmRNb2RhbC5yZW5kZXJMb2FkaW5nKGZhbHNlKTtcclxuICAgIH0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiBoYW5kbGVQcm9maWxlSW1hZ2VGb3JtKGlucHV0VmFsdWVzKSB7XHJcbiAgLy9ldnQucHJldmVudERlZmF1bHQoKTtcclxuICBwcm9maWxlSW1hZ2VNb2RhbC5yZW5kZXJMb2FkaW5nKHRydWUpO1xyXG4gYXBpLnVwZGF0ZVByb2ZpbGVJbWFnZShpbnB1dFZhbHVlcykudGhlbigocmVzKSA9PiB7XHJcbiAgdXNlckluZm8uc2V0VXNlckluZm8ocmVzKTtcclxuICAgIHByb2ZpbGVJbWFnZU1vZGFsLmNsb3NlKCk7XHJcbiAgfSkuY2F0Y2goKGVycikgPT4ge1xyXG4gICAgY29uc29sZS5lcnJvcihlcnIpfSlcclxuICAgIC5maW5hbGx5KCgpPT57XHJcbiAgICAgIHByb2ZpbGVJbWFnZU1vZGFsLnJlbmRlckxvYWRpbmcoZmFsc2UpO1xyXG4gICAgfSk7XHJcbn1cclxuXHJcbnByb2ZpbGVFZGl0QnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XHJcbiAgY29uc3QgcHJvZmlsZURhdGEgPSB1c2VySW5mby5nZXRVc2VySW5mbygpO1xyXG4gIHByb2ZpbGVUaXRsZUlucHV0LnZhbHVlID0gcHJvZmlsZURhdGEubmFtZTtcclxuICBwcm9maWxlQWJvdXRJbnB1dC52YWx1ZSA9IHByb2ZpbGVEYXRhLmFib3V0O1xyXG4gIGVkaXRNb2RhbC5vcGVuKCk7XHJcbn0pO1xyXG5cclxuYWRkQ2FyZEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gIGFkZENhcmRGb3JtVmFsaWRhdG9yLnRvZ2dsZUJ1dHRvblN0YXRlKCk7XHJcbiAgYWRkQ2FyZE1vZGFsLm9wZW4oKTtcclxufSk7XHJcblxyXG5cclxuY29uc3QgYXBpID0gbmV3IEFwaSh7XHJcbiAgYmFzZVVybDogXCJodHRwczovL2Fyb3VuZC5ub21vcmVwYXJ0aWVzLmNvL3YxL2dyb3VwLTEyXCIsXHJcbiAgaGVhZGVyczoge1xyXG4gICAgYXV0aG9yaXphdGlvbjogXCJiYjJmNWQ4Ni05MGNhLTQ0MWItOWFjOC1hMWVlMDIwNThkZjVcIixcclxuICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxyXG4gIH0sXHJcbn0pOyAvLyBsb2cgdGhlIGVycm9yIHRvIHRoZSBjb25zb2xlXHJcblxyXG5cclxubGV0IHNlY3Rpb247XHJcbmxldCB1c2VySWQ7XHJcblxyXG5hcGlcclxuICAuZ2V0QXBwSW5mbygpXHJcbiAgLnRoZW4oKFtjYXJkcywgdXNlckRhdGFdKSA9PiB7XHJcbiAgICB1c2VySWQgPSB1c2VyRGF0YS5faWQ7XHJcbiAgICBzZWN0aW9uID0gbmV3IFNlY3Rpb24oXHJcbiAgICAgIHsgaXRlbXM6IGNhcmRzLCByZW5kZXJlcjogcmVuZGVyQ2FyZCB9LFxyXG4gICAgICBcIi5jYXJkc19fbGlzdFwiXHJcbiAgICApO1xyXG4gICAgc2VjdGlvbi5yZW5kZXJJdGVtcygpO1xyXG4gICAgdXNlckluZm8uc2V0VXNlckluZm8oe1xyXG4gICAgICBuYW1lOiB1c2VyRGF0YS5uYW1lLFxyXG4gICAgICBhYm91dDogdXNlckRhdGEuYWJvdXQsXHJcbiAgICAgIGF2YXRhcjogdXNlckRhdGEuYXZhdGFyLFxyXG4gICAgfSk7XHJcbiAgfSlcclxuICAuY2F0Y2goKGVycikgPT4ge1xyXG4gICAgY29uc29sZS5lcnJvcihlcnIpO1xyXG4gIH0pO1xyXG5cclxub3BlblByb2ZpbGVJbWFnZU1vZGFsKCk7XHJcblxyXG5mdW5jdGlvbiBvcGVuUHJvZmlsZUltYWdlTW9kYWwoKSB7XHJcbiAgcHJvZmlsZUltYWdlQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XHJcbiAgICBwcm9maWxlSW1hZ2VWYWxpZGF0b3IudG9nZ2xlQnV0dG9uU3RhdGUoKTtcclxuICAgIHByb2ZpbGVJbWFnZU1vZGFsLm9wZW4oKTtcclxuICB9KTtcclxufVxyXG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBVc2VySW5mbyB7XHJcbiAgY29uc3RydWN0b3IoeyBuYW1lLCBhYm91dCwgYXZhdGFyIH0pIHtcclxuICAgIHRoaXMubmFtZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IobmFtZSk7XHJcbiAgICB0aGlzLmFib3V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihhYm91dCk7XHJcbiAgICB0aGlzLmF2YXRhciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIucHJvZmlsZV9faW1hZ2VcIik7XHJcbiAgfVxyXG4gIGdldFVzZXJJbmZvKCkge1xyXG4gICAgLy8gcmV0dXJuIHRoZSB0ZXh0IHByb3BlcnRpZXMgb2YgdGhpcy5uYW1lIGFuZCB0aGlzLmpvYlxyXG4gICAgcmV0dXJuIHsgbmFtZTogdGhpcy5uYW1lLnRleHRDb250ZW50LCBhYm91dDogdGhpcy5hYm91dC50ZXh0Q29udGVudCwgYXZhdGFyOiB0aGlzLmF2YXRhci5zcmMgfTtcclxuICB9XHJcbiAgc2V0VXNlckluZm8oeyBuYW1lLCBhYm91dCwgYXZhdGFyIH0pIHtcclxuICAgIC8vIFdoZW4gZm9ybSBpcyBzdWJtaXR0ZWQsIHNldCB0aGUgcHJvZmlsZSBpbmZvXHJcbiAgICB0aGlzLm5hbWUudGV4dENvbnRlbnQgPSBuYW1lO1xyXG4gICAgdGhpcy5hYm91dC50ZXh0Q29udGVudCA9IGFib3V0O1xyXG4gIHRoaXMuYXZhdGFyLnNyYyA9IGF2YXRhcjtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IFBvcHVwIGZyb20gXCIuL1BvcHVwLmpzXCI7XHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBvcHVwV2l0aEltYWdlIGV4dGVuZHMgUG9wdXAge1xyXG4gIGNvbnN0cnVjdG9yKHsgcG9wdXBTZWxlY3RvciB9KSB7XHJcbiAgICBzdXBlcih7IHBvcHVwU2VsZWN0b3IgfSk7XHJcbiAgICB0aGlzLmltYWdlTW9kYWxDYXJkID0gdGhpcy5fbW9kYWxFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjbW9kYWwtaW1hZ2VcIik7XHJcbiAgICB0aGlzLmltYWdlTW9kYWxDYXB0aW9uID0gdGhpcy5fbW9kYWxFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjbW9kYWwtY2FwdGlvblwiKTtcclxuICB9XHJcbiAgb3BlbihjYXJkRGF0YSkge1xyXG4gICAgY29uc29sZS5sb2coY2FyZERhdGEpO1xyXG4gICAgLypJbiB0aGUgb3BlbigpIG1ldGhvZCBvZiB0aGUgUG9wdXBXaXRoSW1hZ2UgY2xhc3MsIFxyXG4gICAgeW91IG5lZWQgdG8gYWRkIGFuIGltYWdlIHRvIHRoZSBwb3B1cCBhbmQgdGhlIFxyXG4gICAgY29ycmVzcG9uZGluZyBpbWFnZSBzcmMgYXR0cmlidXRlIGFsb25nIHdpdGggYSBcclxuICAgIGNhcHRpb24gZm9yIHRoZSBpbWFnZS4qL1xyXG4gICAgdGhpcy5pbWFnZU1vZGFsQ2FwdGlvbi50ZXh0Q29udGVudCA9IGNhcmREYXRhLm5hbWU7XHJcbiAgICB0aGlzLmltYWdlTW9kYWxDYXJkLnNyYyA9IGNhcmREYXRhLmxpbms7XHJcbiAgICB0aGlzLmltYWdlTW9kYWxDYXJkLmFsdCA9IGNhcmREYXRhLm5hbWU7XHJcbiAgICBzdXBlci5vcGVuKCk7XHJcbiAgfVxyXG59XHJcbiIsIi8qZmV0Y2goXCJodHRwczovL2Fyb3VuZC5ub21vcmVwYXJ0aWVzLmNvL3YxL2dyb3VwLTEyL3VzZXJzL21lXCIsIHtcclxuICBoZWFkZXJzOiB7XHJcbiAgICBhdXRob3JpemF0aW9uOiBcImJiMmY1ZDg2LTkwY2EtNDQxYi05YWM4LWExZWUwMjA1OGRmNVwiXHJcbiAgfVxyXG59KVxyXG4gIC50aGVuKHJlcyA9PiByZXMuanNvbigpKVxyXG4gIC50aGVuKChyZXN1bHQpID0+IHtcclxuICAgIGNvbnNvbGUubG9nKHJlc3VsdCk7XHJcbiAgfSk7Ki9cclxuXHJcbiAgZXhwb3J0IGRlZmF1bHQgY2xhc3MgQXBpIHtcclxuICAgIGNvbnN0cnVjdG9yKHsgYmFzZVVybCwgaGVhZGVyc30pIHtcclxuICAgICAgdGhpcy5fYmFzZVVSTCA9IGJhc2VVcmw7XHJcbiAgICAgIHRoaXMuX2hlYWRlcnMgPSBoZWFkZXJzO1xyXG4gICAgfVxyXG4gICAgZ2V0QXBwSW5mbygpIHtcclxuICAgICAgcmV0dXJuIFByb21pc2UuYWxsKFt0aGlzLmdldEluaXRpYWxDYXJkcygpLCB0aGlzLmdldFVzZXJJbmZvKCldKTtcclxuICAgIH1cclxuICBcclxuICAgIGdldEluaXRpYWxDYXJkcygpIHtcclxuICAgICAgcmV0dXJuIHRoaXMuX3JlcXVlc3QoYCR7dGhpcy5fYmFzZVVSTH0vY2FyZHNgLCB7XHJcbiAgICAgICAgbWV0aG9kOiBcIkdFVFwiLFxyXG4gICAgICAgIGhlYWRlcnM6IHRoaXMuX2hlYWRlcnMsXHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgdXBkYXRlUHJvZmlsZUltYWdlKGRhdGEpIHtcclxuICAgICAgcmV0dXJuIHRoaXMuX3JlcXVlc3QoXHJcbiAgICAgICAgYCR7dGhpcy5fYmFzZVVSTH0vdXNlcnMvbWUvYXZhdGFyYCxcclxuICAgICAgICB7XHJcbiAgICAgICAgICBtZXRob2Q6IFwiUEFUQ0hcIixcclxuICAgICAgICAgaGVhZGVyczogdGhpcy5faGVhZGVycyxcclxuICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcclxuICAgICAgICAgICAgYXZhdGFyOiBkYXRhLmxpbmssXHJcbiAgICAgICAgICB9KSxcclxuICAgICAgICB9XHJcbiAgICAgICk7XHJcbiAgICB9XHJcbiAgXHJcbiAgICBnZXRVc2VySW5mbygpIHtcclxuICAgICAgcmV0dXJuIHRoaXMuX3JlcXVlc3QoXHJcbiAgICAgICAgYCR7dGhpcy5fYmFzZVVSTH0vdXNlcnMvbWVgLFxyXG4gICAgICAgIHtcclxuICAgICAgICAgIG1ldGhvZDogXCJHRVRcIixcclxuICAgICAgICAgIGhlYWRlcnM6IHRoaXMuX2hlYWRlcnMsXHJcbiAgICAgICAgfVxyXG4gICAgICApO1xyXG4gICAgfVxyXG4gICAgdXBkYXRlVXNlckluZm8obmFtZSwgYWJvdXQpIHtcclxuICAgICAgcmV0dXJuIHRoaXMuX3JlcXVlc3QoXHJcbiAgICAgICAgYCR7dGhpcy5fYmFzZVVSTH0vdXNlcnMvbWVgLFxyXG4gICAgICAgIHtcclxuICAgICAgICAgIG1ldGhvZDogXCJQQVRDSFwiLFxyXG4gICAgICAgICAgaGVhZGVyczogdGhpcy5faGVhZGVycyxcclxuICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcclxuICAgICAgICAgICAgbmFtZSxcclxuICAgICAgICAgICAgYWJvdXQsXHJcbiAgICAgICAgICB9KSxcclxuICAgICAgICB9XHJcbiAgICAgICk7XHJcbiAgICB9XHJcbiAgXHJcbiAgICBhZGRDYXJkKHsgbmFtZSwgbGluayB9KSB7XHJcbiAgICAgIHJldHVybiB0aGlzLl9yZXF1ZXN0KGAke3RoaXMuX2Jhc2VVUkx9L2NhcmRzYCwge1xyXG4gICAgICAgIG1ldGhvZDogXCJQT1NUXCIsXHJcbiAgICAgICAgaGVhZGVyczogdGhpcy5faGVhZGVycyxcclxuICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XHJcbiAgICAgICAgICBuYW1lLFxyXG4gICAgICAgICAgbGluayxcclxuICAgICAgICB9KSxcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBkZWxldGVDYXJkKGlkKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLl9yZXF1ZXN0KFxyXG4gICAgICAgIGAke3RoaXMuX2Jhc2VVUkx9L2NhcmRzLyR7aWR9YCxcclxuICAgICAgICB7XHJcbiAgICAgICAgICBtZXRob2Q6IFwiREVMRVRFXCIsXHJcbiAgICAgICAgICBoZWFkZXJzOiB0aGlzLl9oZWFkZXJzLFxyXG4gICAgICAgIH1cclxuICAgICAgKTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgaGFuZGxlQ2FyZExpa2VzKCkge1xyXG4gICAgICByZXR1cm4gUHJvbWlzZS5hbGwoW3RoaXMuYWRkQ2FyZExpa2UoKSwgdGhpcy5yZW1vdmVDYXJkTGlrZSgpXSk7XHJcbiAgICB9XHJcbiAgICBhZGRDYXJkTGlrZShpZCkge1xyXG4gICAgICByZXR1cm4gdGhpcy5fcmVxdWVzdChcclxuICAgICAgICBgJHt0aGlzLl9iYXNlVVJMfS9jYXJkcy9saWtlcy8ke2lkfWAsXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgbWV0aG9kOiBcIlBVVFwiLFxyXG4gICAgICAgICAgaGVhZGVyczogdGhpcy5faGVhZGVycyxcclxuICAgICAgICB9XHJcbiAgICAgICk7XHJcbiAgICB9XHJcbiAgICByZW1vdmVDYXJkTGlrZShpZCkge1xyXG4gICAgICByZXR1cm4gdGhpcy5fcmVxdWVzdChcclxuICAgICAgICBgJHt0aGlzLl9iYXNlVVJMfS9jYXJkcy9saWtlcy8ke2lkfWAsXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgbWV0aG9kOiBcIkRFTEVURVwiLFxyXG4gICAgICAgICAgaGVhZGVyczogdGhpcy5faGVhZGVycyxcclxuICAgICAgICB9XHJcbiAgICAgICk7XHJcbiAgICB9XHJcbiAgICAvLyBvdGhlciBtZXRob2RzIGZvciB3b3JraW5nIHdpdGggdGhlIEFQSVxyXG4gICAgX2NoZWNrUmVzcG9uc2UocmVzKSB7XHJcbiAgICAgIGlmIChyZXMub2spIHtcclxuICAgICAgICByZXR1cm4gcmVzLmpzb24oKTtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoYEVycm9yICR7SlNPTi5zdHJpbmdpZnkocmVzKX1gKTtcclxuICAgIH1cclxuICBcclxuICAgIF9yZXF1ZXN0KHVybCwgb3B0aW9ucykge1xyXG4gICAgICByZXR1cm4gZmV0Y2godXJsLCBvcHRpb25zKS50aGVuKHRoaXMuX2NoZWNrUmVzcG9uc2UpO1xyXG4gICAgfVxyXG4gIH1cclxuICAiXSwibmFtZXMiOlsiQ2FyZCIsImNvbnN0cnVjdG9yIiwiX3JlZiIsImNhcmREYXRhIiwiY2FyZFNlbGVjdG9yIiwiX2hhbmRsZUNhcmRDbGljayIsImhhbmRsZURlbGV0ZUNsaWNrIiwicHJvY2Vzc0xpa2VDbGljayIsInVzZXJJZCIsInRoaXMiLCJfY2FyZElkIiwiX2lkIiwiX25hbWUiLCJuYW1lIiwiX2xpbmsiLCJsaW5rIiwiX2NhcmRTZWxlY3RvciIsIl9jYXJkVGVtcGxhdGVJbnB1dCIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsImNvbnRlbnQiLCJmaXJzdEVsZW1lbnRDaGlsZCIsIl9oYW5kbGVEZWxldGVDbGljayIsIl91c2VySWQiLCJfY3VycmVudFVzZXJJZCIsIm93bmVyIiwiX3Byb2Nlc3NMaWtlQ2xpY2siLCJfbW9kYWxEZWxldGVCdXR0b24iLCJfbGlrZXMiLCJsaWtlcyIsIl9jYXJkRWxlbWVudCIsIl9nZXRUZW1wbGF0ZSIsIl9jYXJkSW1hZ2UiLCJfY2FyZE5hbWUiLCJfc2V0RXZlbnRMaXN0ZW5lcnMiLCJfbGlrZUJ1dHRvbiIsImFkZEV2ZW50TGlzdGVuZXIiLCJfZGVsZXRlQnRuIiwic2V0TGlrZXNJbmZvIiwiX3VwZGF0ZUxpa2VzVmlldyIsInRleHRDb250ZW50IiwibGVuZ3RoIiwiaXNMaWtlZCIsImNsYXNzTGlzdCIsImFkZCIsInJlbW92ZSIsInNvbWUiLCJsaWtlIiwiaGFuZGxlTW9kYWxEZWxldGVCdXR0b24iLCJoYW5kbGVEZWxldGVCdXR0b24iLCJjbG9uZU5vZGUiLCJnZXRDYXJkIiwic3JjIiwiYWx0IiwiRm9ybVZhbGlkYXRvciIsInZhbGlkYXRpb25PcHRpb25zIiwiZm9ybUVsZW1lbnQiLCJfZm9ybVNlbGVjdG9yIiwiZm9ybVNlbGVjdG9yIiwiX2lucHV0U2VsZWN0b3IiLCJpbnB1dFNlbGVjdG9yIiwiX3N1Ym1pdEJ1dHRvblNlbGVjdG9yIiwic3VibWl0QnV0dG9uU2VsZWN0b3IiLCJfaW5hY3RpdmVCdXR0b25DbGFzcyIsImluYWN0aXZlQnV0dG9uQ2xhc3MiLCJfaW5wdXRFcnJvckNsYXNzIiwiaW5wdXRFcnJvckNsYXNzIiwiX2Vycm9yQ2xhc3MiLCJlcnJvckNsYXNzIiwiX2Zvcm0iLCJfaW5wdXRMaXN0IiwiQXJyYXkiLCJmcm9tIiwicXVlcnlTZWxlY3RvckFsbCIsIl9zYXZlQnV0dG9uIiwiX3Nob3dJbnB1dEVycm9yIiwiaW5wdXRFbGVtZW50IiwiX2Vycm9yTWVzc2FnZUVsZW1lbnQiLCJpZCIsInZhbGlkYXRpb25NZXNzYWdlIiwiX2hpZGVJbnB1dEVycm9yIiwiX2hhc0ludmFsaWRJbnB1dCIsImV2ZXJ5IiwidmFsaWRpdHkiLCJ2YWxpZCIsInRvZ2dsZUJ1dHRvblN0YXRlIiwic2F2ZUJ1dHRvbiIsIm9wdGlvbnMiLCJkaXNhYmxlZCIsIl9jaGVja0lucHV0VmFsaWRpdHkiLCJmb3JFYWNoIiwiZW5hYmxlVmFsaWRhdGlvbiIsImV2dCIsInByZXZlbnREZWZhdWx0IiwiU2VjdGlvbiIsImNvbnRhaW5lciIsIml0ZW1zIiwicmVuZGVyZXIiLCJfY29udGFpbmVyIiwicmVuZGVySXRlbXMiLCJhZGRJdGVtIiwiaXRlbSIsInByZXBlbmQiLCJQb3B1cCIsInBvcHVwU2VsZWN0b3IiLCJfbW9kYWxFbGVtZW50IiwibW9kYWxDbG9zZUJ1dHRvbiIsIm9wZW4iLCJfaGFuZGxlRXNjQ2xvc2UiLCJjbG9zZSIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJ3aGljaCIsInNldEV2ZW50TGlzdGVuZXJzIiwiY2xvc2VNb2RhbE9uUmVtb3RlQ2xpY2siLCJ0YXJnZXQiLCJjdXJyZW50VGFyZ2V0IiwiY29udGFpbnMiLCJQb3B1cFdpdGhGb3JtIiwiaGFuZGxlRm9ybVN1Ym1pdCIsInN1cGVyIiwiX21vZGFsRm9ybSIsIl9oYW5kbGVGb3JtU3VibWl0IiwiX3N1Ym1pdEJ0biIsIl9zdWJtaXRCdG5UZXh0IiwiX2lucHV0VmFsdWVzIiwiX2lucHV0cyIsIl9nZXRJbnB1dFZhbHVlcyIsImlucHV0IiwidmFsdWUiLCJyZW5kZXJMb2FkaW5nIiwiaXNMb2FkaW5nIiwibG9hZGluZ1RleHQiLCJhcmd1bWVudHMiLCJ1bmRlZmluZWQiLCJyZXNldCIsInNldFN1Ym1pdEFjdGlvbiIsImFjdGlvbiIsInByb2ZpbGVFZGl0QnV0dG9uIiwicHJvZmlsZUVkaXRNb2RhbCIsInByb2ZpbGVUaXRsZUlucHV0IiwicHJvZmlsZUFib3V0SW5wdXQiLCJhZGRDYXJkRWRpdE1vZGFsIiwiYWRkQ2FyZEJ1dHRvbiIsInByb2ZpbGVJbWFnZUJ1dHRvbiIsInByb2ZpbGVJbWFnZSIsImVkaXRGb3JtVmFsaWRhdG9yIiwiYWRkQ2FyZEZvcm1WYWxpZGF0b3IiLCJ1c2VySW5mbyIsImFib3V0IiwiYXZhdGFyIiwiZ2V0VXNlckluZm8iLCJzZXRVc2VySW5mbyIsIl9yZWYyIiwiZWRpdE1vZGFsIiwiaW5wdXRWYWx1ZXMiLCJhcGkiLCJ1cGRhdGVVc2VySW5mbyIsInRoZW4iLCJkYXRhIiwiY2F0Y2giLCJlcnIiLCJjb25zb2xlIiwiZXJyb3IiLCJmaW5hbGx5IiwiYWRkQ2FyZE1vZGFsIiwiYWRkQ2FyZCIsInJlbmRlckNhcmQiLCJpbWFnZU1vZGFsIiwiaW1hZ2VNb2RhbENhcmQiLCJpbWFnZU1vZGFsQ2FwdGlvbiIsImxvZyIsImNhcmREZWxldGVNb2RhbCIsInByb2ZpbGVJbWFnZU1vZGFsIiwidXBkYXRlUHJvZmlsZUltYWdlIiwicmVzIiwicHJvZmlsZUltYWdlVmFsaWRhdG9yIiwiY2FyZCIsImNhcmRJZCIsImRlbGV0ZUNhcmQiLCJzZWN0aW9uIiwicmVtb3ZlQ2FyZExpa2UiLCJhZGRDYXJkTGlrZSIsInByb2ZpbGVEYXRhIiwiYmFzZVVybCIsImhlYWRlcnMiLCJfYmFzZVVSTCIsIl9oZWFkZXJzIiwiZ2V0QXBwSW5mbyIsIlByb21pc2UiLCJhbGwiLCJnZXRJbml0aWFsQ2FyZHMiLCJfcmVxdWVzdCIsIm1ldGhvZCIsImJvZHkiLCJKU09OIiwic3RyaW5naWZ5IiwiaGFuZGxlQ2FyZExpa2VzIiwiX2NoZWNrUmVzcG9uc2UiLCJvayIsImpzb24iLCJyZWplY3QiLCJ1cmwiLCJmZXRjaCIsImF1dGhvcml6YXRpb24iLCJjYXJkcyIsInVzZXJEYXRhIl0sInNvdXJjZVJvb3QiOiIifQ==